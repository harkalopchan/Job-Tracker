// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jobs Job[]
  notes Note[]

  @@map("users")
}

model Job {
  id          String   @id @default(cuid())
  title       String
  company     String
  location    String?
  description String?
  salary      String?
  url         String?
  stage       Stage    @default(APPLIED)
  priority   Priority @default(MEDIUM)
  appliedAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  notes Note[]
  tags  JobTag[]

  @@map("jobs")
}

model Note {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  jobId String?
  job   Job? @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String   @default("#3B82F6")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jobs JobTag[]

  @@map("tags")
}

model JobTag {
  id     String @id @default(cuid())
  jobId  String
  tagId  String
  job    Job   @relation(fields: [jobId], references: [id], onDelete: Cascade)
  tag    Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([jobId, tagId])
  @@map("job_tags")
}

enum Role {
  USER
  ADMIN
}

enum Stage {
  APPLIED
  INTERVIEW
  OFFER
  REJECTED
  WITHDRAWN
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
